# syntax=docker/dockerfile:1.0-windows
FROM mcr.microsoft.com/windows/servercore:ltsc2022

# Use PowerShell as shell
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]

# Download MSYS2 installer
RUN try { \
        Invoke-WebRequest -Uri 'https://github.com/msys2/msys2-installer/releases/download/2024-07-27/msys2-x86_64-20240727.exe' -OutFile 'msys2-installer.exe' \
    } catch { \
        throw "Failed to download MSYS2 installer: $_" \
    }

# Install MSYS2 with debugging
RUN Write-Host "Starting MSYS2 installation at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"; \
    Write-Host 'Note: Set-MpPreference unavailable in Server Core; Defender may interfere...'; \
    Write-Host 'Monitoring installation progress...'; \
    $process = Start-Process -FilePath '.\\msys2-installer.exe' -ArgumentList '/S' -PassThru -RedirectStandardOutput 'install.log' -RedirectStandardError 'install.err'; \
    while (-not $process.HasExited) { \
        Start-Sleep -Seconds 10; \
        if (Test-Path 'C:\\msys64') { Write-Host "MSYS2 directory detected at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"; dir 'C:\\msys64' -ErrorAction SilentlyContinue | Write-Host } \
    }; \
    Write-Host "Installer completed at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') with exit code: $($process.ExitCode)"; \
    Write-Host 'Installer output:'; \
    Get-Content 'install.log' -ErrorAction SilentlyContinue | Write-Host; \
    Write-Host 'Installer errors (if any):'; \
    Get-Content 'install.err' -ErrorAction SilentlyContinue | Write-Host; \
    Write-Host "Checking MSYS2 directory at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"; \
    $msysPath = 'C:\\msys64'; \
    if (-not (Test-Path $msysPath)) { \
        Write-Host 'C:\msys64 not found, checking C:\msys2'; \
        $msysPath = 'C:\\msys2'; \
        if (-not (Test-Path $msysPath)) { Write-Host 'C:\msys2 not found'; dir 'C:\\' -ErrorAction SilentlyContinue | Write-Host } \
    }; \
    if (Test-Path $msysPath) { dir $msysPath -ErrorAction SilentlyContinue | Write-Host }; \
    Write-Host 'Checking for msys2_shell.cmd and bash.exe after installation:'; \
    if (Test-Path "$msysPath\\msys2_shell.cmd") { Write-Host 'msys2_shell.cmd found' } else { Write-Host 'msys2_shell.cmd not found' }; \
    if (Test-Path "$msysPath\\usr\\bin\\bash.exe") { Write-Host 'bash.exe found' } else { Write-Host 'bash.exe not found' }; \
    if (-not (Test-Path "$msysPath\\usr\\bin\\bash.exe")) { \
        Write-Host 'Running MSYS2 initialization...'; \
        if (Test-Path "$msysPath\\msys2_shell.cmd") { \
            Write-Host "Running msys2_shell.cmd at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"; \
            & "$msysPath\\msys2_shell.cmd" -defterm -no-start -c 'exit'; \
            Write-Host "Checking for bash.exe after initialization at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"; \
            if (Test-Path "$msysPath\\usr\\bin\\bash.exe") { Write-Host 'bash.exe found after initialization' } \
            else { throw 'MSYS2 initialization failed: bash.exe not found in $msysPath\\usr\\bin' } \
        } else { \
            throw 'MSYS2 installation failed: msys2_shell.cmd not found in $msysPath' \
        } \
    }; \
    Write-Host "Verifying bash.exe persistence after delay at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"; \
    Start-Sleep -Seconds 10; \
    if (-not (Test-Path "$msysPath\\usr\\bin\\bash.exe")) { throw 'bash.exe was removed after installation!' }; \
    Write-Host "Checking Defender events..."; \
    Get-EventLog -LogName 'Microsoft-Windows-Windows Defender/Operational' -ErrorAction SilentlyContinue | Where-Object { $_.EventID -eq 1006 -or $_.EventID -eq 1008 } | Select-Object TimeGenerated, Message | Write-Host

# Clean up installer
RUN Remove-Item 'msys2-installer.exe'; \
    Remove-Item 'install.log' -ErrorAction SilentlyContinue; \
    Remove-Item 'install.err' -ErrorAction SilentlyContinue

# Update PATH
ENV PATH="C:\\msys64\\usr\\bin;C:\\msys64\\mingw64\\bin;%PATH%"

# Update MSYS2 packages and clean cache
RUN & 'C:\\msys64\\usr\\bin\\bash.exe' -c 'pacman -Syu --noconfirm'; \
    Remove-Item -Recurse -Force 'C:\\msys64\\var\\cache\\pacman\\pkg' -ErrorAction SilentlyContinue

# Bash sanity check
RUN $bashPath = 'C:\\msys64\\usr\\bin\\bash.exe'; \
    if (Test-Path $bashPath) { \
        Write-Host 'bash.exe exists'; \
        & $bashPath --version | Write-Host; \
    } else { \
        throw 'bash.exe not found at sanity check!' \
    }

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s CMD ["C:\\msys64\\usr\\bin\\bash.exe", "--version"]

# Default command
CMD ["C:\\msys64\\usr\\bin\\bash.exe", "-l"]

# Usage: docker run -it <image-name>